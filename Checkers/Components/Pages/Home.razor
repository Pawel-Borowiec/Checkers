@page "/"
@using System.Security.Cryptography.X509Certificates
@using Checkers.Models
@using Checkers.Components.Elements
@using Microsoft.Extensions.Internal
@inject Checkers.Services.ILogservice LogService;

@rendermode InteractiveServer

<style>
    .board
    {
        display: flex;
        flex-direction: column;
        margin: 10px;
        width: fit-content;
    }
    .row
    {
        display: flex;
        width: fit-content;
        
    }
</style>
<PageTitle>Checkers</PageTitle>


<div>
    <p>Obecna kolej: @CurrentPlayer.Color.ToString()</p>
    <p>Wynik:</p>
    <p>Biały: @FirstPlayer.Pawns.Count</p>
    <p>Czarny: @SecondPlayer.Pawns.Count</p>
    @if ((IsPartyOver))
    {
        <p>Wygrał Gracz: @CurrentPlayer.Color.ToString()</p>
    }
</div>

<div class="board">
    @for (int i = 0; i < 10; i++)
    {
        <div class="row" >
            @for (int j = 0; j < 10; j++)
            {
                <Tile X="@i" Y="@j" Pawn="GetPawnForSpecificTile(i,j)" ParentMethod="HandleClickAsync"></Tile>
            }
        </div>
        <br/>

    }
</div>

<History Logs="@LogService.GetLogs()"/>




@code{
    public List<TileModel> Tiles { get; set; }
    public Player FirstPlayer { get; set; }
    public Player SecondPlayer { get; set; }
    public Player CurrentPlayer { get; set; }
    private bool Streak { get; set; } = false;
    private bool IsPartyOver { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        Tiles = new List<TileModel>();
        for (var i = 0; i < 10; i++)
        {
            for (var j = 0; j < 10; j++)
            {
                Tiles.Add(new TileModel(i, j));
            }
        }

        FirstPlayer = new Player(Color.WHITE);
        SecondPlayer = new Player(Color.BLACK);
        CurrentPlayer = FirstPlayer;
        return base.OnInitializedAsync();
    }

    private Pawn GetPawnForSpecificTile(int x, int y)
    {
        var pawn = FirstPlayer.Pawns.FirstOrDefault(p => p.X == x && p.Y == y);
        if (pawn is not null)
        {
            return pawn;
        }

        pawn = SecondPlayer.Pawns.FirstOrDefault(p => p.X == x && p.Y == y);

        return pawn;

    }

    private bool HandleClickAsync(int x, int y)
    {
        var activePawn = CurrentPlayer.Pawns.FirstOrDefault(pawn => pawn.IsActive);

        if (activePawn is null)
        {
            var pawn = CurrentPlayer.Pawns.FirstOrDefault(p => p.X == x && p.Y == y);
            if (pawn is null)
            {
                return false;
            }

            pawn.IsActive = true;
            StateHasChanged();
            return false;
        }

        if (activePawn.X == x && activePawn.Y == y)
        {
            activePawn.IsActive = false;
            StateHasChanged();
            return false;
        }

        if (!IsFieldAvalaible(activePawn.X, activePawn.Y, x, y, activePawn.IsCrowned))
        {
            return false;

        }

        LogService.Log($"PLAYER {CurrentPlayer.Color.ToString()} moves pawn from {activePawn.X} {activePawn.Y} to {x} {y}");
        activePawn.X = x;
        activePawn.Y = y;
        activePawn.IsActive = false;

        TurnPawnIntoQueen(activePawn, x);

        ChangeCurrentPlayerIfHeIsNotInStreak();
        StateHasChanged();
        return true;
    }

    private void ChangeCurrentPlayerIfHeIsNotInStreak()
    {
        var opponent = CurrentPlayer.Equals(FirstPlayer) ? SecondPlayer : FirstPlayer;
        if (opponent.Pawns.Count == 0)
        {
            IsPartyOver = true;
            return;
        }

        if (Streak)
        {

            Streak = false;
            return;
        }

        CurrentPlayer = CurrentPlayer.Equals(FirstPlayer) ? SecondPlayer : FirstPlayer;
    }

    private void TurnPawnIntoQueen(Pawn activePawn, int x)
    {
        if (CurrentPlayer.Equals(FirstPlayer))
        {
            if (x == 9)
            {
                activePawn.IsCrowned = true;
            }
        }
        else
        {
            if (x == 0)
            {
                activePawn.IsCrowned = true;
            }
        }
    }

    private bool IsFieldAvalaible(int oldX, int oldY, int newX, int newY, bool isCrowned)
    {
        return isCrowned ? IsFieldAvalaibleForQueen(oldX, oldY, newX, newY) : IsFieldAvalaibleForPawn(oldX, oldY, newX, newY);
    }

    private bool IsFieldAvalaibleForCapture(int oldX, int oldY, int newX, int newY)
    {

        if (oldX + oldY == newX + newY)
        {
            return IsFieldViableForCaptureWithFirstDiagonal(oldX, newX, oldY, newY, CurrentPlayer, CurrentPlayer.Equals(FirstPlayer) ? SecondPlayer : FirstPlayer);
        }

        if (oldX - oldY == newX - newY)
        {
            return IsFieldViableForCaptureWithSecondDiagonalx(oldX, newX, oldY, newY, CurrentPlayer, CurrentPlayer.Equals(FirstPlayer) ? SecondPlayer : FirstPlayer);
        }

        return false;

    }

    private bool IsFieldViableForCaptureWithFirstDiagonal(int oldX, int newX, int oldY, int newY, Player currentPlayer, Player opponent)
    {
        var friendlyPawns = currentPlayer.Pawns.Where(pawn => pawn.X + pawn.Y == newX + newY && IsFieldInProperDirection(oldY, newY, pawn.Y)).ToList();
        if (friendlyPawns.Any())
        {
            return false;
        }

        var enemyPawns = opponent.Pawns.Where(pawn => pawn.X + pawn.Y == newX + newY && IsFieldInProperDirection(oldY, newY, pawn.Y)).ToList();
        if (enemyPawns.Count() > 1)
        {
            return false;
        }

        var destroyedPawn = enemyPawns.FirstOrDefault();
        if (destroyedPawn is not null)
        {
            opponent.Pawns.Remove(destroyedPawn);
            StateHasChanged();
            Streak = true;
            return true;
        }

        return true;
    }

    private bool IsFieldViableForCaptureWithSecondDiagonalx(int oldX, int newX, int oldY, int newY, Player currentPlayer, Player opponent)
    {
        var friendlyPawns = currentPlayer.Pawns.Where(pawn => pawn.X - pawn.Y == newX - newY && IsFieldInProperDirection(oldY, newY, pawn.Y)).ToList();
        if (friendlyPawns.Any())
        {
            return false;
        }

        var enemyPawns = opponent.Pawns.Where(pawn => pawn.X - pawn.Y == newX - newY && IsFieldInProperDirection(oldY, newY, pawn.Y)).ToList();
        if (enemyPawns.Count() > 1)
        {
            return false;
        }

        var destroyedPawn = enemyPawns.FirstOrDefault();
        if (destroyedPawn is not null)
        {
            opponent.Pawns.Remove(destroyedPawn);
            StateHasChanged();
            Streak = true;
            return true;
        }

        return true;
    }


    private bool IsFieldInProperDirection(int oldCoordinate, int newCoordinate, int pawnCoordinate)
    {
        return newCoordinate > oldCoordinate ? pawnCoordinate > oldCoordinate && pawnCoordinate < newCoordinate : pawnCoordinate < oldCoordinate && pawnCoordinate > newCoordinate;
    }

    private bool IsFieldAvalaibleForQueen(int oldX, int oldY, int newX, int newY)
    {
        Pawn otherPawn;
        if (!IsFieldOccupied(newX, newY)) return false;

        //bicie
        if (!IsFieldAvalaibleForCapture(oldX, oldY, newX, newY)) return false;


        // normalne ruchy
        if (oldX + oldY == newX + newY)
        {
            return true;
        }

        if (oldX - oldY == newX - newY)
        {
            return true;
        }

        return false;
    }

    private bool IsFieldAvalaibleForPawn(int oldX, int oldY, int newX, int newY)
    {
        Pawn otherPawn;
        if (!IsFieldOccupied(newX, newY)) return false;

        //bicie
        if (CurrentPlayer.Equals(FirstPlayer))
        {
            otherPawn = SecondPlayer.Pawns.FirstOrDefault(p => p.X == (oldX + newX) / 2 && p.Y == (oldY + newY) / 2);
            if (otherPawn is not null)
            {
                SecondPlayer.Pawns.Remove(otherPawn);
                StateHasChanged();
                Streak = true;
                return true;
            }


        }
        else
        {
            otherPawn = FirstPlayer.Pawns.FirstOrDefault(p => p.X == (oldX + newX) / 2 && p.Y == (oldY + newY) / 2);
            if (otherPawn is not null)
            {
                FirstPlayer.Pawns.Remove(otherPawn);
                StateHasChanged();
                Streak = true;
                return true;
            }

        }

        // normalne ruchy
        if (oldX != newX - 1 && oldX != newX + 1)
        {
            return false;
        }

        if (oldY != newY - 1 && oldY != newY + 1)
        {
            return false;
        }

        return true;
    }

    private bool IsFieldOccupied(int newX, int newY)
    {
        return FirstPlayer.Pawns.Union(SecondPlayer.Pawns).FirstOrDefault(p => p.X == newX && p.Y == newY) is null;
    }

}
